#version 410 core

in vec4 fragpos;
in vec3 fragnormal;
in vec2 texCoord;
in vec2 normalMapCoord;

uniform vec4 lightCamera;
uniform vec3 viewPos;
out vec4 FragColor;
uniform sampler2D texture1;

void main()
{
    vec3 ambient = vec3(0.2, 0.2, 0.2);
    vec3 objColor = vec3(1.0,0.2,1.0);

    float specularStrength = 0.5;

    vec3 normal = fragnormal + texture(texture1, normalMapCoord*0.5).rgb;
    normal = normal * 2.0 - 1.0;
    normal = normalize(normal);

    vec3 lightDir = normalize(vec3(lightCamera) - fragpos.xyz);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 viewDir = normalize(viewPos - fragpos.xyz);
    vec3 reflectDir = reflect(-lightDir, normal);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 512);
    vec3 specular = specularStrength * spec * vec3(1.0,1.0,1.0);

    vec3 color = (diff+specular+ambient)*objColor;

    FragColor = vec4(color, 1.0);

    //FragColor = mix(vec4(color, 1.0),texture(texture1, texCoord), 0.5);
}