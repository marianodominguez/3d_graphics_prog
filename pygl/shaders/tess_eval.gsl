#version 410 core

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

layout(quads, equal_spacing, cw) in;

out vec4 fragpos;
out vec3 fragnormal;

vec4 CP[16];

void bezierDerivative(out float[4] b, out float[4] db, float t) {
	//derivatives

    b[0] = pow(1.0 - t, 3);
	b[1] = 3.0 * pow(1.0 - t, 2) * t;
	b[2] = 3.0 * (1.0 - t) * pow(t,2);
	b[3] = pow(t, 3);

	db[0] = -3.0 * pow(1.0 - t, 2);
	db[1] = -6.0 * (1.0 - t) * t + 3.0 * pow(1.0 - t,2);
	db[2] = -3.0 * pow(t, 2) + 6.0 * t * (1.0 - t);
	db[3] = 3.0 * pow(t, 2);
}

vec4 evaluateBezier(float[4] bu,float[4] bv) {
    vec4 p= vec4(0.0, 0.0, 0.0, 1.0);

    int idx =0;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            p += vec4(CP[idx] * bu[i] * bv[j] );
            idx++;
        }
    }
    return p;
}

void main() {
    int idx=0;
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	float dbu[4],dbv[4],bu[4],bv[4];

    for (int i = 0; i < 16; i++) {
        CP[i]=gl_in[i].gl_Position;
    }

    bezierDerivative(bu,dbu, u);
    bezierDerivative(bv,dbv, v);
    fragpos = evaluateBezier(bu,bv);

    vec3 dPos_du=vec3(0,0,0);
    vec3 dPos_dv=vec3(0,0,0);

    idx=0;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            dPos_du+=vec3(CP[idx]*dbu[i]*bv[j]);
            idx++;
        }
    }

    idx=0;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            dPos_dv+=vec3(CP[idx]*bu[i]*dbv[j]);
            idx++;
        }
    }

    fragnormal=normalize(cross(dPos_dv, dPos_du));
    gl_Position = fragpos;
}
